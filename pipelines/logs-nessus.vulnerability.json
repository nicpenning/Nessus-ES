PUT _ingest/pipeline/logs-nessus.vulnerability
{
  "description": "This pipeline will enrich vulnerability scan data found from Nessus.",
  "processors": [
    {
      "append": {
        "if": "ctx.tags == null",
        "field": "tags",
        "value": [
          "vulnerability"
        ],
        "allow_duplicates": false
      }
    },
    {
      "convert": {
        "field": "nessus.cvss3.base_score",
        "type": "float",
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "nessus.cvss.base_score",
        "type": "float",
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "nessus.cvss.impact_score",
        "type": "float",
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "nessus.cvss.temporal_score",
        "type": "float",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "vulnerability.score.base",
        "value": "{{nessus.cvss3.base_score}}",
        "ignore_empty_value": true,
        "if": "ctx.nessus?.cvss3?.base_score != null"
      }
    },
    {
      "script": {
        "source": "double score = ctx.nessus.cvss3.base_score;\r\n\r\ndef result;\r\n\r\nif (score >= 9.0) {\r\n  result = \"Critical\";\r\n} else if (score >= 7.0 && score < 9.0) {\r\n  result = \"High\";\r\n}else if (score > 4.0 && score < 7.0) {\r\n  result = \"Medium\";\r\n}else if (score > 0.0 && score < 4) {\r\n  result = \"Low\";\r\n}else if (score == 0.0) {\r\n  result = \"Info\";\r\n}\r\n\r\nctx.vulnerability.severity = result;",
        "if": "ctx.nessus?.cvss3?.base_score != null"
      }
    },
    {
      "fingerprint": {
        "fields": [
          "nessus.plugin.id",
          "destination.port",
          "network.transport",
          "vulnerability.id"
        ],
        "target_field": "nessus.vulnerability.custom_hash",
        "ignore_missing": true,
        "tag": "Create unique hash for each vulnerability"
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "error.message",
        "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
      }
    }
  ]
}
